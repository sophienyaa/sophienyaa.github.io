<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>microservices on Sophie&#39;s Space</title>
    <link>https://sophieis.lgbt/tags/microservices/</link>
    <description>Read the latest  microservices on Sophie&#39;s Space</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>me@sophi.ee (Sophie üå∏)</managingEditor>
    <webMaster>me@sophi.ee (Sophie üå∏)</webMaster>
    <lastBuildDate>Sun, 27 Dec 2020 13:00:00 +0000</lastBuildDate><atom:link href="https://sophieis.lgbt/tags/microservices/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Microservices inside Salesforce With Platform Events and Change Data Capture, Part Two</title>
      <link>https://sophieis.lgbt/posts/2020-12-27-microservices-inside-salesforce-with-platform-events-and-change-data-capture-part-two/</link>
      <pubDate>Sun, 27 Dec 2020 13:00:00 +0000</pubDate>
      <author>me@sophi.ee (Sophie üå∏)</author>
      <guid>https://sophieis.lgbt/posts/2020-12-27-microservices-inside-salesforce-with-platform-events-and-change-data-capture-part-two/</guid>
      <description>Now that the holidays are over, its time for Part Two! Haven&amp;rsquo;t read part one yet? Check it out and then come back, don&amp;rsquo;t worry, I&amp;rsquo;ll wait for you.
‚åöÔ∏è
Finished? Great, let&amp;rsquo;s go!
How does this work on Salesforce? As we discussed in part one, we can take advantage of the Salesforce enterprise messaging platform to build &amp;lsquo;microservices&amp;rsquo; in Salesforce.
Before we go any further, these microservices are a little different from traditional ones.</description>
      <content:encoded>
        <![CDATA[ <p>
<img class="enclosure" src="/img/23b9a76b8b2a24bf3937cd648179c24f_badge.png" alt="Header Image"  />
</p>
<p>Now that the holidays are over, its time for Part Two! Haven&rsquo;t read <a href="https://mickwheelz.net/salesforce/microservices/2020/12/12/microservices-on-salesforce.html" title="part one">part one</a> yet? Check it out and then come back, don&rsquo;t worry, I&rsquo;ll wait for you.</p>
<p>‚åöÔ∏è</p>
<p>Finished? Great, let&rsquo;s go!</p>
<h3 id="how-does-this-work-on-salesforce">How does this work on Salesforce?</h3>
<p>As we discussed in part one, we can take advantage of the Salesforce enterprise messaging platform to build &lsquo;microservices&rsquo; in Salesforce.</p>
<p>Before we go any further, these microservices are a little different from traditional ones. As we know, Salesforce provides a platform as a Service. This includes everything we need, including the database, the runtime, the language, etc. As we know, we can <em>only</em> use the tools provided by the platform. We can&rsquo;t just deploy some random java to our salesforce org (yet&hellip; üòâ) so we must write our on-platform services in Apex* and we use the database we are given*</p>
<p>*(yes there are other languages/databases (e.g JS in Aura/LWC and External Objects&hellip; but that&rsquo;s out of the scope of this post!)</p>
<p>So in reality, our services are discrete &lsquo;chunks&rsquo; of Apex that don&rsquo;t have dependancies on other code, or potentially even objects in Salesforce (aside from the Platform Event definition they use).</p>
<p>We still get most of the same advantages as traditional microservices. We can however, have microservices in our Application that are <em>outside</em> of salesforce, and these can behave as traditional microservices, with their own language, database, runtime, etc. We will cover these too!</p>
<p>So let&rsquo;s take a look at how we do this&hellip;</p>
<h3 id="on-platform">On Platform</h3>
<p>Let&rsquo;s think about the example from part one. We have a simple billing system that uses Opportunities and Opportunity Line Items. When an Opportunity is closed/won, we want a PDF invoice (with the line items listed on it) generated and attached to the Opportunity.</p>
<p>Using the &lsquo;old&rsquo; way, you might have a trigger on the opportunity that uses VisualForce to generate the PDF and attach it to the Opportunity. This runs on synchronously on save and you may eventually run into limit issues with this approach.</p>
<p>So how do we do it using microservices? Well let&rsquo;s take a look at the below diagram</p>
<p>
<img class="enclosure" src="/img/image12.png" alt=""  />
</p>
<p>If you want to see the example code for this approach, you can check out the repo <a href="https://github.com/mickwheelz/DF2019-Invoicing-Salesforce" title="here">here</a> and it is referenced below.</p>
<p>You can see here we have three &lsquo;services&rsquo;;</p>
<ol>
<li>The Apex trigger <code>OpportunityChangeEventTrigger</code>, is on the Opportunity Change Data (CDC) event, so it isn&rsquo;t run synchronously. It simply it calls the   <code>OpportunityChangeEventService</code> class to fires the Invoice Request Platform Event (PE) that contains the information needed to generate the Invoice. This approach is taken to decouple the next service from the Opportunity.</li>
<li>The Invoice generation service. This listens for the Invoice Request PE in the <code>GenerateInvoicePDFTrigger</code>, then calls the <code>InvoicePDFService</code> and it uses VisualForce (<code>InvoicePDF</code> / <code>InvoicePDFController</code>) to generate a PDF invoice from the information contained in the event. It knows nothing about the original opportunity (this is important!) When it is finished it simply fires a &lsquo;Invoice Response&rsquo; PE. It ONLY generates PDFs, nothing else.</li>
<li>Finally, we have <code>InvoicePDFTrigger</code> that listens for the Invoice Response PE and then calls the <code>InvoicePDFService</code> so that it can insert an attachment record. It doesn&rsquo;t know or care where the PDF actually came from.</li>
</ol>
<p>None of these services have any hard dependencies on each other. They do their small individual jobs and that is it. They also all run asynchronously so the user doesn&rsquo;t need to sit and wait for them to complete for their record to be saved.</p>
<p>Want to see how this looks under the hood? Well you can check out the code here</p>
<p>So what happens when our little VisualForce PDF generator service stops scaling or is otherwise unfit for purpose? Well, we simply replace it with something&hellip;</p>
<h3 id="off-platform">Off Platform</h3>
<p>We&rsquo;ve decided we are going to use a small service running on Heroku to generate our PDFs now, so we&rsquo;ve written something in NodeJS and deployed it. Let&rsquo;s take a look at how we switch to using this now.</p>
<p>If you want to take a look at the code for the Heroku service, you can see it <a href="https://github.com/mickwheelz/DF2019-Invoicing-Heroku" title="here">here</a>, It is referenced below.</p>
<blockquote>
<p>
<img class="enclosure" src="/img/image11.png" alt=""  />
</p>
</blockquote>
<p>You can see we again have three services, and the first and third have not changed. The code is identical. We have ONLY replaced the middle service.</p>
<p>The NodeJS is very simple, in <code>index.js</code> the <code>begin()</code> function it logs in to Salesforce (to access the event bus) and then begins listening for Invoice Request PEs. If it receives  one, it calls <code>processGenerateInvoicePDFEvent()</code> which uses <a href="https://pdfkit.org/" title="PDFKit">PDFKit</a> to generate the invoice PDF, this is handled in <code>generateInvoice.js</code></p>
<p>When it is finished generating the PDF, <code>fireInvoicePDFEvent</code> is called to fire the Invoice Response PE for to be picked up by our attachment service inside salesforce.</p>
<p>To handle the Salesforce requests, we are using the excellent <a href="https://jsforce.github.io/" title="JSForce">JSForce</a> library.</p>
<p>Now that we have our little PDF service running, I bet you are wondering how we switch to using it.</p>
<p>We disable <code>GenerateInvoicePDFTrigger</code> &hellip; that&rsquo;s it. Seriously.</p>
<p>
<img class="enclosure" src="/img/screenshot-2020-12-27-at-11-57-43.png" alt=""  />
</p>
<p>If we want to switch back, all we need to do is shut down our Heroku service and switch the trigger back on. Simples!</p>
<p>Of course, in the real world we would likely remove the trigger from production once we had finished migrating to the new service, but you can see how simple it is with this approach.</p>
<p>Now that we&rsquo;ve see how we can create microservices on and off platform, and swap them at will we should&hellip;</p>
<h3 id="wrap-up">Wrap Up</h3>
<p>The event driven paradigm is a very flexible one and allows things to change without the usual level of friction. It can speed up development, and allow teams to work in parallel. It can even speed up the end user experience, as everything is done async. It is an excellent option for large and complex Applications, but it is not a silver bullet.</p>
<p>It does introduce more &lsquo;moving parts&rsquo;, for smaller, simpler applications this may not be worth it. It is also worth considering the <a href="https://developer.salesforce.com/docs/atlas.en-us.platform_events.meta/platform_events/platform_events_api_considerations.htm">limits of platform events</a>, for very large volumes you may need to move to a different event bus, such as <a href="https://kafka.apache.org/intro">Apache Kafka</a>. Salesforce cannot natively talk to Kafka, but you can use middleware like MuleSoft or you can build your own bespoke services to do so (a topic for a future post perhaps&hellip; ü§î)</p>
<p>You should <strong>always</strong> take time to consider what is the right approach for what you are building, both now and in the future. However I hope this post has informed and inspired you to think about how you could use this architecture in Salesforce!</p>
<p>If you&rsquo;ve got any questions or comments, please send me a tweet <a href="https://twitter.com/mickwheelz_">@mickwheelz_</a></p>
 ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Microservices inside Salesforce With Platform Events and Change Data Capture, Part One.</title>
      <link>https://sophieis.lgbt/posts/2020-12-12-microservices-on-salesforce/</link>
      <pubDate>Sat, 12 Dec 2020 15:00:00 +0000</pubDate>
      <author>me@sophi.ee (Sophie üå∏)</author>
      <guid>https://sophieis.lgbt/posts/2020-12-12-microservices-on-salesforce/</guid>
      <description>Normally, when I do a talk at Dreamforce, or another conference, I write a follow up blog post covering the same content. But the end of 2019 was pretty busy with Dreamforce, Monkey Run Morocco, French Touch Dreamin and Christmas/Holidays. I figured I&amp;rsquo;d get it written up in early 2020&amp;hellip;
Then 2020 happened&amp;hellip; and turned in to a complete dumpster fire. With everything going on, I was finding it difficult to find the time and motivation to write anything.</description>
      <content:encoded>
        <![CDATA[ <p>
<img class="enclosure" src="/img/23b9a76b8b2a24bf3937cd648179c24f_badge.png" alt="Header Image"  />
</p>
<p>Normally, when I do a talk at Dreamforce, or another conference, I write a follow up blog post covering the same content. But the end of 2019 was pretty busy with <a href="https://www.salesforce.com/blog/dreamforce-2019-infographic/">Dreamforce</a>, <a href="https://www.theadventurists.com/adventures/monkey-run-morocco/">Monkey Run Morocco</a>, <a href="https://frenchtouchdreamin.com/">French Touch Dreamin</a> and Christmas/Holidays. I figured I&rsquo;d get it written up in early 2020&hellip;</p>
<p>Then 2020 happened&hellip; and turned in to a complete dumpster fire. With everything going on, I was finding it difficult to find the time and motivation to write anything. With the year almost over, and my blog revamped I knew I wanted to get it written.</p>
<p>Enough boring excuses. Here we go.</p>
<p>This is part one of the follow up post to my talk &ldquo;Microservices inside Salesforce With Platform Events and Change Data Capture&rdquo;. If you did catch my talk at Dreamforce 2019, or London&rsquo;s Calling 2020, I hope you enjoyed it. If not (or even if you did!), read on as I will cover the same topics here.</p>
<p>In part one we will cover the concepts, and in part two, the implementation. The first thing we need to understand is&hellip;</p>
<h3 id="what-are-microservices">What are microservices?</h3>
<p>The key to microservices is kind of in the name; small (micro) services. These services generally cover a specific functional area, or function and perform only that function. (e.g generating documents, or handling payments).</p>
<p>Ideally, these services are independently deployable, maintainable and testable. In larger applications or organisations these services are often developed and maintained by different teams, even using different languages or tech stacks. They are loosely coupled to other services and shouldn&rsquo;t have any &lsquo;hard dependencies&rsquo; on them.</p>
<p>When grouped together, all of these services, and their supporting infrastructure make up a larger application (e.g a Billing System).</p>
<p>A good analogy is the robots in a car factory. You have robots to weld the cars, robots to paint them and so on.  The painting robot is independent of the welding one. It does not know how to weld, or care how the car was welded. All it does is paint the car and send it on to the next station (micro service) in the factory (application)</p>
<p>
<img class="enclosure" src="/img/abb-paint-atomizer.jpg" alt=""  />
</p>
<p>One of the key benefits of this is it means that when it comes time to upgrade the welding robot, the painting one does not need to be changed. Likewise if the painting robot needs to be changed, the welding robot doesn&rsquo;t care.</p>
<p>As you&rsquo;ve probably experienced, changing chunks of a normal &lsquo;monolithic&rsquo; type application can be painful, as it&rsquo;s often tightly connected to other parts of the application with no easy way to change just the one part you need to.</p>
<p>With a microservice approach, often these issues are either removed entirely, or heavily mitigated.</p>
<p>This is great and all, but these micro services need a way to communicate with each other, this needs to be in a &lsquo;common language&rsquo; they can all understand, so this brings us to&hellip;</p>
<h3 id="what-is-an-event-driven-architecture">What is an event-driven architecture?</h3>
<p>So as alluded to above, this approach hinges on these services having a common way to talk to each other.
If I&rsquo;ve got a service written in Apex on Salesforce, it has to know how to talk to a service written in NodeJS on Heroku, or something written in Java running on-prem.</p>
<p>This is where an event-driven architecture comes into play. It means that all of these services share a common eventbus on to which they publish (or push) to and subscribed to (or consume from), normally these events are segregated into topics or channels. I am going to use the terms publish, subscribe and topic to describe this from here on out.</p>
<p>The event bus sits in the middle of all of these microservices, services produce and subscribe to it to move data between them and perform their functions. The event bus also often manages things like queueing, replay of events, access to topics and security. Some common event buses are Apache Kafka, MQTT and CometD.
Salesforce of course also has its own event bus, the Enterprise Messaging Platform (often just called Platform Events, which uses CometD)</p>
<p>
<img class="enclosure" src="/img/9d0edf028a3e0056757e93a3244a43de_salesforce-event-bus.jpeg" alt=""  />
</p>
<p>To better understand this concept, let&rsquo;s think for a second about twitter, it is like an event bus. If I see #Salesforce trending on twitter, I might click on that hashtag. This would mean I am &lsquo;subscribing&rsquo; to the Salesforce &rsquo;topic&rsquo;. If I then tweet &ldquo;#Salesforce is awesome&rdquo; I am then &lsquo;publishing&rsquo; to Salesforce &rsquo;topic&rsquo;, and anyone else following #Salesforce (aka subscribing to that topic) will see that message. Your microservices work the same way.</p>
<p>Each service will publish and subscribe to topics it &lsquo;cares&rsquo; about in order to function. It doesn&rsquo;t really have any knowledge of the other services, it just grabs the information it needs to do its job, and publishes its results for other services to do the same. This of course allows for services to be swapped/changed/enhanced without causing impact to other services within the application.</p>
<p>Another key feature of an event driven architecture is the ability for multiple subscribers to subscribe to the same topic. Often we only want one service producing to a topic, but there are exceptions to this rule.</p>
<p>For example, if I am building a billing system, perhaps I need to perform some tasks when an Opportunity is closed/won.
I might need to generate a PDF invoice to send to the customer or I might need to generate a packing slip to send to a warehouse.
If all of these subscribe to the &lsquo;Opportunity&rsquo; topic, then all of them can perform their task independently when they receive a closed/won opportunity message on that topic. Likewise, if I have one source of truth for Opportunity data (Salesforce) then I don&rsquo;t want other systems publishing data to the Opportunity topic.</p>
<p>If in the future I also need to activate the customer&rsquo;s new service in another system, the new system can simply listen to this topic! We don&rsquo;t need to make any changes to the existing systems, we can just &lsquo;bolt on&rsquo; this new system.</p>
<p>All of this sounds exciting right? So&hellip;</p>
<h3 id="how-does-this-relate-to-salesforce">How does this relate to Salesforce?</h3>
<p>Salesforce has a number of tools to help us out here, under the banner of &lsquo;The Salesforce enterprise messaging platform&rsquo;. This is often just called &lsquo;Platform Events&rsquo;, however Platform Events are just one of the tools available to us.</p>
<p>There are two we are going to cover in detail here, Platform Events and Change Data Capture.</p>
<p>So let&rsquo;s start with&hellip;</p>
<h4 id="platform-events">Platform Events</h4>
<p>Platform Events in this context is the term salesforce gives to custom topics. e.g topics we are developers are able to define and use for whatever we like.</p>
<p>We can define a platform event in much the same way as a Custom Object. They have a name like &ldquo;My_Cool_Event__e&rdquo; and have various field types that can be added to them (text, numbers, checkboxes, etc) which will contain the data for subscribers to use, or for publishers to populate.</p>
<p>Once we have defined our platform event &rsquo;topic&rsquo;, we can then publish events to it. This can be done from within Apex code, from processes or flow, or via Salesforce APIs from external services.</p>
<p>We can also subscribe to events from Apex triggers, processes, flows, lightning and visualforce components, or in external services via CometD.</p>
<p>Platform events are the most flexible kind of event, as they can be defined to contain any information we want, and be published or subscribed through a number of different methods.</p>
<p>There however is another very useful kind of event, these are&hellip;</p>
<h4 id="change-data-capture">Change Data Capture</h4>
<p>Change data capture (CDC) is a feature of Salesforce that publishes &lsquo;change events&rsquo;, These events represent changes to Salesforce records. Things that are classified as changes, and thus are published include creation of a record, updating a record, and deleting or undeleting a record. Once enabled for an object, these events are automatically published by Salesforce.</p>
<p>Change data capture is similar in a lot of ways to Platform Events and, in fact, uses the same underlying bus. The main difference is that publication of these events is done automatically by salesforce, and the layout of data within them (their schema) is unable to be changed by us. We can, however, subscribe to these events in the exact same way as a Platform Event.</p>
<p>Why is CDC important? Well it means that we can subscribe to any change in data across Salesforce, so in our billing example above, we don&rsquo;t need to define our own &lsquo;Opportunity&rsquo; event, we can simply enable CDC and subscribe to the events we need.</p>
<p>Now that we know about CDC, we need to&hellip;</p>
<h4 id="put-it-all-together">Put it all together</h4>
<p>We know that the &lsquo;Salesforce Enterprise Messaging Platform&rsquo; is our event bus. It is a part of Salesforce, and our publishers and subscribers (aka our micro services) need to be able to access it. For services on platform, it&rsquo;s easy.</p>
<p>There is nothing special that needs to happen (aside from creating Platform Events or enabling CDC), you just need to build them. It&rsquo;s slightly harder with Services outside of Salesforce. They need users accounts, and the appropriate level of access and your micro services needs to understand how to publish or subscribe to events (more on this in part two&hellip;)</p>
<p>We also know that our topics are Platform Events (if defined by us) or Change Data Capture (defined by Salesforce). We know that we can subscribe to both CDC and Platform Events in a variety of ways both on and off platform. We also know that we can publish Platform Events in a number of ways both on and off platform. Finally, we know that CDC events are published for us by Salesforce (once enabled).</p>
<h3 id="conclusion-and-further-reading">Conclusion and Further Reading</h3>
<p>In part one, we covered the main concepts, microservices and event driven architecture. How they work together and how they apply to Salesforce with Platform Events and Change Data Capture.</p>
<p>In part two we will cover how to build an application with these concepts, including how to swap out a service within that application to an off-platform version!</p>
<p>I hope you&rsquo;ve found this informative, and if you&rsquo;ve got any questions or comments, please send me a tweet <a href="https://twitter.com/mickwheelz_">@mickwheelz_</a>. If you want to learn more in the meantime, check out the links below;</p>
<p><a href="https://developer.salesforce.com/blogs/2018/07/which-streaming-event-do-i-use.html">Salesforce Blog - Which Streaming Event Do I Use?</a></p>
<p><a href="https://trailhead.salesforce.com/content/learn/modules/platform_events_basics">Trailhead - Platform Event Basics</a></p>
 ]]>
      </content:encoded>
    </item>
    
  </channel>
</rss>
