<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>hardware on Sophie&#39;s Space</title>
    <link>https://sophieis.lgbt/tags/hardware/</link>
    <description>Read the latest  hardware on Sophie&#39;s Space</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>me@sophi.ee (Sophie ðŸŒ¸)</managingEditor>
    <webMaster>me@sophi.ee (Sophie ðŸŒ¸)</webMaster>
    <lastBuildDate>Sat, 23 Apr 2022 11:30:00 +0100</lastBuildDate><atom:link href="https://sophieis.lgbt/tags/hardware/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hacking cat printers for fun and... likes on twitter?</title>
      <link>https://sophieis.lgbt/posts/2022-04-23-hacking-cat-printers-for-fun-and-likes-on-twitter/</link>
      <pubDate>Sat, 23 Apr 2022 11:30:00 +0100</pubDate>
      <author>me@sophi.ee (Sophie ðŸŒ¸)</author>
      <guid>https://sophieis.lgbt/posts/2022-04-23-hacking-cat-printers-for-fun-and-likes-on-twitter/</guid>
      <description>Allow me to introduce you to this&amp;hellip;
This amazing piece of technology is a cat printer. It is a small, battery powered, monochrome thermal printer that is able to be controlled over Bluetooth Low Energy.
It&amp;rsquo;s designed to portable for use with your smartphone. With it, you can print your photos on the go, just like a polaroid! (but way worse)
Here is an example:
Original Image Cat Printer Hold up, what?</description>
      <content:encoded>
        <![CDATA[ <p>
<img class="enclosure" src="/img/cat-printer.png" alt="Header Image"  />
</p>
<p>Allow me to introduce you to this&hellip;</p>
<p>This amazing piece of technology is a cat printer. It is a small, battery powered, monochrome thermal printer that is able to be controlled over Bluetooth Low Energy.</p>
<p>It&rsquo;s designed to portable for use with your smartphone. With it, you can print your photos on the go, just like a polaroid! (but way worse)</p>
<p>Here is an example:</p>
<table>
<thead>
<tr>
<th>Original Image</th>
<th>Cat Printer</th>
</tr>
</thead>
<tbody>
<tr>
<td>
<img class="enclosure" src="/img/monkey.jpg" alt=""  />
</td>
<td>
<img class="enclosure" src="/img/car-printer-monkey.jpg" alt=""  />
</td>
</tr>
</tbody>
</table>
<h3 id="hold-up-what-why">Hold up, what? why?</h3>
<p>Who wouldn&rsquo;t want to print their photos in glorious 1 bit dithered monochrome?!</p>
<p>One of my favourite <a href="https://www.youtube.com/watch?v=EW8svX5OErc">youtubers</a> had covered similar ones, and I then saw one of my <a href="https://twitter.com/xssfox/status/1421271256205201409">friends</a> tweet about it. How could I say no to such a glorious device?</p>
<p>Objectively crappy output aside, the prints do have a certain aesthetic to them that I like.</p>
<p>But, truth be told, I bought the cat printer mostly because it seemed like a fun thing to play with. But, as it turns out, it was quite hackable.</p>
<p>&hellip;also its cute.</p>
<h3 id="oook-go-on-then">Oook, go on then&hellip;</h3>
<p>These little printers are available on the usual online retailers, like <a href="https://www.amazon.co.uk/Wireless-Bluetooth-Printers-Learning-Compatible/dp/B09MCNVRJD/ref=sr_1_4?crid=32XFNY7KOPHZC&amp;keywords=cat+printer&amp;qid=1650708084&amp;s=computers&amp;sprefix=cat+printer%2Ccomputers%2C48&amp;sr=1-4">Amazon</a> and <a href="https://www.aliexpress.com/item/1005003341930695.html?spm=a2g0o.productlist.0.0.2e9f6430zpLBgL&amp;algo_pvid=cb9834a6-5a6c-4359-ac4a-105c7c4376f3&amp;algo_exp_id=cb9834a6-5a6c-4359-ac4a-105c7c4376f3-0&amp;pdp_ext_f=%7B%22sku_id%22%3A%2212000027021364344%22%7D&amp;pdp_pi=31.03%3B10.91%3B-1%3B-1%40salePrice%3BGBP%3Bsearch-mainSearch">AliExpress</a> for ~Â£30. There are also other, non animal based versions too.</p>
<p>They are intended to be used with a mobile application called &ldquo;<a href="https://apps.apple.com/gb/app/iprint/id1542944105">iPrint</a>&rdquo; in order to print text or images.</p>
<p>
<img class="enclosure" src="/img/img_0463.PNG" alt=""  />
</p>
<p>But, what if you want to use your cat printer in another way? With your computer or some other device? Well, thanks to other hackers there are plenty of options out there;</p>
<ul>
<li>
<p>There is a <a href="https://hackaday.com/2021/09/21/mini-wireless-thermal-printers-get-arduino-library-and-macos-app/">hackaday</a> article here that covers both <a href="https://github.com/bitbank2/Thermal_Printer">Arduino</a> and <a href="https://github.com/bitbank2/Print2BLE">macOS</a> options by <a href="https://github.com/bitbank2">Larry Bank</a>.</p>
</li>
<li>
<p>If CircutPython is more your jam, you can check out this tutorial on Adafruit <a href="https://learn.adafruit.com/ble-thermal-cat-printer-with-circuitpython">here</a> by <a href="https://learn.adafruit.com/users/jepler">Jeff Epler</a>.</p>
</li>
<li>
<p>Or, if you&rsquo;re more into regular python, or rust there is a good list of projects <a href="https://github.com/JJJollyjim/catprinter">here</a>.</p>
</li>
</ul>
<p>But, like any hacker knows, the fact there is already a way to do something isn&rsquo;t a good enough reason not to do it yourself! So that is what I did!</p>
<p>But first, let&rsquo;s talk a little about the&hellip;</p>
<h3 id="hardware">Hardware</h3>
<p>The hardware is pretty well documented already, a good example is the <a href="https://werwolv.net/blog/cat_printer">writeup</a> by <a href="https://twitter.com/WerWolv">WerWolv</a>.</p>
<p>But, to give some context here is a quick overview;</p>
<p>It&rsquo;s a thermal printer and uses 57mm paper, similar to what you&rsquo;d find in card machines and the like. It can fit approx 40mm diameter rolls of paper.</p>
<p>The print resolution is 384px wide (203dpi), being a thermal printer, it can only print in monochrome (1bit / black and white)</p>
<p>The brains of the operation is a JL MCU that there is vanishingly little documentation for, and the printer communicates with other devices via Bluetooth Low Energy (BLE).</p>
<p>It&rsquo;s powered by an internal lithium battery and is charged via micro-usb.</p>
<p>And the most important feature, it has little ears and a cute face.</p>
<p>So with that in mind, on to the&hellip;</p>
<h3 id="software">Software</h3>
<p>I decided to build my version of cat printer goodness in NodeJS, which I&rsquo;ve called <code>printkitty.js</code>, imaginative, I know. You can check it out on <a href="https://github.com/sophienyaa/printkitty.js">GitHub here</a></p>
<p>I chose NodeJS mostly because it&rsquo;s what I am comfortable with. This, as it turns out, may not have been the best decision&hellip; due to reasons I&rsquo;ll get in to later.</p>
<p>The printer has no &lsquo;pure&rsquo; text mode or inbuilt fonts. It simply prints everything as an image. So with that in mind, my initial goal was simply to be able to send images to the printer.</p>
<h4 id="bluetooth-low-energy">Bluetooth Low Energy</h4>
<p>To do this, the first thing I needed was a BLE library. I settled on <a href="https://www.npmjs.com/package/@abandonware/noble">noble</a>, as it seemed easy enough to work with, and there aren&rsquo;t a lot of other choices for Node.</p>
<p>I then came across <a href="https://github.com/JJJollyjim/catprinter">this repository</a> from <a href="https://twitter.com/JJJollyjim">JJJollyjim</a> that collects a bunch of cat printer projects, and then a <a href="https://github.com/JJJollyjim/catprinter/blob/f5322f7d728ed491218d788f0eff6cad7e11ab3f/COMMANDS.md">document</a> by <a href="https://twitter.com/bad_opcode">bad_opcode</a> that had nice and clear documentation of the protocol used.</p>
<p>Once I was able to connect to the printer with noble, I scanned for characteristics and found quite a few&hellip; <code>AE01,AE02,AE03,AE04,AE05,AE10</code>. with <code>AE01</code> being write only, and <code>AE10</code> being read/write, and <code>AE02</code> and <code>AE04</code> being for notifications.</p>
<p>I initially tried the <code>AE10</code> read/write characteristic, but had no luck making the printer do anything. I then tried <code>AE01</code> and wrote the bytes for a &rsquo;eject paper&rsquo;, and much to my excitement, paper came out of the printer.</p>
<p>I then tried to get info, while listening to <code>AE02</code> and I did indeed receive some data on that characteristic. With the knowledge that this was likely to work&hellip;</p>
<h4 id="lets-try-and-make-it-print-something">Let&rsquo;s try and make it print something</h4>
<p>I had read that the printer essentially took an array of bits to construct an image, 1 for black (e.g activate the printhead) and 0 for white. (e.g dont)</p>
<p>This is where my choice of NodeJS started to become less than ideal. JavaScript is not exactly the most low level language, and working with individual bits isn&rsquo;t particularly ergonomic, compared to say C/C++ (which I am somewhat used to in playing with microcontrollers).</p>
<p>With that said, I was able to construct bit strings (e.g <code>&quot;11111111&quot;</code>) and parse those in to integers (e.g <code>255</code> / <code>0xFF</code>). That has proven to be good enough. So I &lsquo;drew&rsquo; a square in bits, parsed it to bytes and constructed an array of with one <code>Buffer</code> for each like, and each buffer.</p>
<p>I sent the square to the printer, and it printed, but didn&rsquo;t advance as it did so. So I threw a call to feed the paper by one step each iteration. I then had a square, but the sides of it were on the inside, so It looked more like an <code>I</code>. I then went back and re-read the <a href="https://github.com/JJJollyjim/catprinter/blob/f5322f7d728ed491218d788f0eff6cad7e11ab3f/COMMANDS.md">document</a> and realised I missed this <em>very</em> important bit under the print section&hellip; &ldquo;with each byte packed with the least significant bit first.&rdquo;</p>
<p>The easiest / laziest way to resolve this was simply to reverse the bit strings and then parse that into bytes. There is probably a better way to do this, bit it works well enough for now.</p>
<p>After doing that, I got my square! Now on to the next challenge, trying to print something meaningful (&hellip;and by that, I mean a picture of <a href="https://en.wikipedia.org/wiki/Grumpy_Cat">grumpy cat)</a>.</p>
<h4 id="parsing-images-in-nodejs">Parsing images in NodeJS</h4>
<p>Turns out this was another sucky thing about using NodeJS, there aren&rsquo;t a huge amount of image processing libraries. I settled on <a href="https://sharp.pixelplumbing.com/">sharp</a> and while it is very performant and easy to use, there aren&rsquo;t a lot of options for producing pure monochrome images. I tried using its inbuilt dithering but always ended up with an image that was grey and white, not black and white.</p>
<p>I then came across <a href="https://twitter.com/noopkat">noopkat&rsquo;s</a> <a href="https://github.com/noopkat/floyd-steinberg">floyd-steinberg</a> package, that was able to produce the results I was after.</p>
<p>After pluming it and sharp together, I was able to produce dithered, monochrome images from a wide range of input image formats. There is definitely better ways to do this, so any suggestions are welcome!</p>
<h4 id="building-a-bitmap">Building a bitmap</h4>
<p>Now that I had monochrome images, I needed to turn those into 1bpp bitmaps that the printer could understand. If you&rsquo;ve ever worked with small monochrome displays and microcontrollers this should be sort familiar.</p>
<p>As said above, the format is 1 bit per pixel, with 0 for white and 1 for black, grouped in to bytes with the least significant bit first. As the print area is 348px wide, this means 48 bytes of data per line.</p>
<p>I learnt here, that if you provide less than 48 bytes per line, the printer will <strong>not</strong> automatically advance when given the next line.</p>
<p>The final data structure for my bitmap was an array of <code>Buffer</code> objects, with each one being 48 bytes. When initialised they are filled with 0&rsquo;s so if the image is less than 348px wide, it will be padded with 0&rsquo;s.</p>
<p>Now that I had all this, I was able to start..</p>
<h4 id="printing-actual-images">Printing actual images</h4>
<p>I started trying to feed data to the printer, following the same set of commands that existing code did;</p>
<ol>
<li>Set the quality, I&rsquo;ve set it to &lsquo;3&rsquo; and this seems to work fine</li>
<li>Send the first magic &rsquo;lattice&rsquo; command</li>
<li>Set the print &rsquo;energy&rsquo; to medium</li>
<li>Set the drawing mode (it has a &rsquo;text&rsquo; mode, to spite not having a way to print text)</li>
<li>Setting the feed speed to <code>0x23</code>, as seems to be done in the other solutions</li>
<li>Sending the print data</li>
<li>Feeding the paper for 120 steps</li>
<li>Doing the last &rsquo;lattice&rsquo; command</li>
</ol>
<p>This order of operations was discovered by during the reverse engineering of the &ldquo;iPrint&rdquo; app done by <a href="https://werwolv.net/blog/cat_printer">WerWolv</a>.</p>
<p>However, each time I tried, I&rsquo;d only get a few lines of the print out before it would stop. This is because I had neglected to put a delay between each line of the print data.</p>
<p>As others had discovered and documented, if you don&rsquo;t do this, the printer will get overwhelmed and stop printing.</p>
<p>Herein lies yet another issue with JavaScript. There is no native <code>delay()</code> or <code>sleep()</code> functionality. Annoying as it is, it does makes sense when you understand the <a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ">JS event loop</a>.</p>
<p>However, for this purpose it is not difficult hack one in and allow the code to pause for 10ms between sending commands to the printer. This solved the the issue and I was finally able to print images successfully!</p>
<p>Now simply by running <code>printkitty --image grumpy.png</code> I was able to get this:</p>
<!-- raw HTML omitted -->
<p>Printing images is cool and all, but&hellip;</p>
<h4 id="what-about-text">What about text?</h4>
<p>Because our little cat printer can <em>only</em> do images, if we want to print text we need to find a way to turn our text into an image!</p>
<p>This was where using sharp turned out to be a good decision. It is incredibly easy to build an SVG (as after all SVGs are markup very similar to HTML) that contains the text you want to print, and then turn that in to an image and print it in the same way as you do any other.</p>
<p>I found a very cool <a href="https://www.digitalocean.com/community/tutorials/how-to-process-images-in-node-js-with-sharp">article</a> from DigitalOcean about how to use sharp for more general image processing, but it was here I found the idea of simply constructing a SVG, turning it in to an image and processing it.</p>
<p>One thing to note here, is I skip the dithering process as the generated text is always going to be monochrome. The other fun part about doing it this way, is it makes it very easy to pass in font and font size choices for our printed text.</p>
<p>This code I&rsquo;ve written to handle text is pretty rudimentary, and I&rsquo;ve not yet added a way to scale the height of the image with the text, but I can fix that in later releases.</p>
<p>All of this culminated in being able to run <code>printkitty --text &quot;~nyaa&quot; --font &quot;Comic Sans MS&quot; --size 100</code> and getting this:</p>
<!-- raw HTML omitted -->
<p>So I can print images, and even text now, but to do so I need to run them through my app. What if I wanted to be able to <em>just print</em> from any application like you can with any other <em>boring, non-cat printer</em>?</p>
<h4 id="enter-ipp-internet-printing-protocol">Enter, IPP (Internet Printing Protocol)</h4>
<p>IPP is a standard that has been around for some time, with the idea being that you can print documents over a network (or, like, the internet) to any printer without pesky things like drivers or software.</p>
<p>My boring, <em>non-cat</em> Samsung laser printer supports it, as do basically any modern network enabled printer. What I didn&rsquo;t realise is how <em>simple</em> a protocol it is</p>
<p>I found <a href="https://github.com/watson/ipp-printer">this package</a> from <a href="https://twitter.com/wa7son">watson</a> that implemented a basic IPP server in node and watched his <a href="https://www.youtube.com/watch?v=58Ti8w1yX2w">accompanying talk</a> on the protocol and how he did it. It also supports niceties like Bonjour/zeroconf making actually adding your cat printer to your system a snap.</p>
<p>The package listens for print jobs and then outputs them to your local filesystem as postscript files. This was great, but sadly sharp doesn&rsquo;t support these.</p>
<p>I was again let down by NodeJS when I couldn&rsquo;t find any native libraries to handle converting postscript to an image (e.g PNG) that I could easily process.</p>
<p>I did however find wrappers around <a href="https://www.ghostscript.com/">ghostscript</a>, which can perform this task. But this would mean a dependancy on <code>gs</code> being installed. I wanted to avoid this, but sadly I could not find any other viable options.</p>
<p>Ultimately, I decided to skip using a wrapper and simply call <code>gs</code> from within my code by using Node&rsquo;s <code>child_process</code> package. This is a bit hack-y but it works well enough for this application.</p>
<p>So with all that in place, I was able to generate a PNG image, from the received postscript print data and pass that into my existing code.</p>
<p>All of this means, I could simply run <code>printkitty --ipp</code> and I was able to use my cat printer from any application!</p>
<!-- raw HTML omitted -->
<p>There is still more to do, like generally improve the code and try and hack in AirPrint support, but that will have to wait for a future post.</p>
<p>Ok, so what was the point of all this?</p>
<h3 id="conclusion-and-thanks">Conclusion and thanks</h3>
<p>Well&hellip; the point of this&hellip; was&hellip; <em>just to do it.</em></p>
<p>To elaborate on that, it was to learn more about my little cat-faced, thermal printing, friend by experimenting on it.</p>
<p>In these experiments, along with learning about the hardware itself,  I learnt more about Node and JavaScript in general. I also learnt a little about how IPP worked, something I&rsquo;d used plenty but never really thought about. I also got a handful of likes and hopefully also made some smile on twitter.</p>
<p>The friend who inspired me to get one in the first place conducted her own set of cat printer experimentation, going even further by setting up things like a <a href="https://twitter.com/xssfox/status/1469595519773122566">telegram bot</a> and printing images from <a href="https://twitter.com/xssfox/status/1418727717135028227">SSTV</a>, which are worth checking out.</p>
<p>If you&rsquo;ve got your own cat printer, or been inspired to get one by this post, please give <a href="https://github.com/sophienyaa/printkitty.js">printkitty.js</a> a try, I&rsquo;d love to hear your feedback&hellip; and if you go on to experiment yourself I&rsquo;d absolutely love to see your car printer projects!</p>
<p>Finally, I&rsquo;d like to say thanks to everyone who&rsquo;s work I&rsquo;ve referenced in this post, as what they&rsquo;ve done has enabled my experimentation here.</p>
 ]]>
      </content:encoded>
    </item>
    
    <item>
      <title>Yet another Raspberry Pi Cyberdeck</title>
      <link>https://sophieis.lgbt/posts/2021-01-16-yet-another-raspberry-pi-cyberdeck/</link>
      <pubDate>Sun, 17 Jan 2021 17:30:00 +0000</pubDate>
      <author>me@sophi.ee (Sophie ðŸŒ¸)</author>
      <guid>https://sophieis.lgbt/posts/2021-01-16-yet-another-raspberry-pi-cyberdeck/</guid>
      <description>If you are a regular reader of blogs like hackaday, then you will have noticed in recent years that &amp;lsquo;cyberdecks&amp;rsquo; have become quite popular.
Most of these are essentially custom designed/built laptops based around various SBCs, with the Rapsberry Pi being a popular choice. Some of them use Intel NUCs or other PC hardware, some even feature head mounted displays!
They generally have a retro-futuristic, hand-built, utilitarian aesthetic. Cyberdecks often feature in cyberpunk books, movies, video games, etc.</description>
      <content:encoded>
        <![CDATA[ <p>
<img class="enclosure" src="/img/dmesg.jpg" alt="Header Image"  />
</p>
<p>If you are a regular reader of blogs like <a href="https://hackaday.com/" title="hackaday">hackaday</a>, then you will have noticed in recent years that &lsquo;cyberdecks&rsquo; have become quite popular.</p>
<p>Most of these are essentially custom designed/built laptops based around various SBCs, with the <a href="https://www.raspberrypi.org/">Rapsberry Pi</a> being a popular choice. Some of them use <a href="https://www.intel.co.uk/content/www/uk/en/products/boards-kits/nuc.html">Intel NUCs</a> or other PC hardware, some even feature head mounted displays!</p>
<p>They generally have a retro-futuristic, hand-built, utilitarian aesthetic. Cyberdecks often feature in cyberpunk books, movies, video games, etc.</p>
<h2 id="first-attempts">First Attempts</h2>
<p>I love the design of these, and over the last year or so I have experimented with the idea of building my own. I have even done a few prototypes or builds that I never finished or discarded for some reason. They were all based largely around the same hardware.</p>
<p>My first go was a laser-cut acrylic design, this was before I purchased a 3D printer. I used the laser cutter at my local <a href="https://bristol.hackspace.org.uk/" title="hackspace">hackspace</a>.</p>
<p>
<img class="enclosure" src="/img/img_1409.jpg" alt="First Attempt"  />
</p>
<blockquote>
<p>It was a thing, it worked but I didn&rsquo;t like the design or assembly.</p>
</blockquote>
<p>It was based around a Raspberry Pi 4, 7&quot; LCD touchscreen and a &lsquo;AK33&rsquo; mechanical keyboard.</p>
<p>I abandoned this design pretty early on, it was a pain to put together and I wasn&rsquo;t happy with how it looked.</p>
<p>A while later, I bought a 3d printer (<a href="https://creality3d.shop/products/creality3d-ender-3-pro-high-precision-3d-printer">Ender 3 Pro</a>) and set about designing my next attempt.</p>
<p>
<img class="enclosure" src="/img/img_1868.jpg" alt="Second Attempt"  />
</p>
<blockquote>
<p>This one was much better, but I still wasn&rsquo;t happy.</p>
</blockquote>
<p>This one used the same hardware, and I was sort-of happy with it, but I could never get the keyboard to sit right and it was a pain to print, so I gave up on this design.</p>
<h2 id="current-attempt">Current &lsquo;Attempt&rsquo;</h2>
<p>
<img class="enclosure" src="/img/dmesg.jpg" alt="Curent Attempt"  />
</p>
<blockquote>
<p>Here it is, in all its glory!</p>
</blockquote>
<p>Over the Christmas break, inspired by 100+ hours of Cyberpunk 2077 (Which, I loved, to spite its flaws) I thought I&rsquo;d have another go at this whole cyberdeck thing.</p>
<p>My 3D modeling skills are <em>slightly</em> better than when I made the first attempt (though still very poor) so I hoped I&rsquo;d have more success.</p>
<p>I wanted my cyberdeck to have certain features/qualities;</p>
<ol>
<li>It had to be portable, and able to run from a battery.</li>
<li>I wanted to include an SDR in it, so it could be used as a portable listening station</li>
<li>I wanted to use the same AK33 keyboard I had from the previous attempts</li>
<li>I wanted it to be &lsquo;clean&rsquo;&hellip; e.g no cables hanging out, etc.</li>
<li>I wanted it to be easy to put together.</li>
</ol>
<p>With those goals in mind, I fired up <a href="https://www.autodesk.co.uk/products/fusion-360/overview">Fusion360</a>, a piece of software with which I have a love hate relationship and set to work.</p>
<h3 id="design">Design</h3>
<p>I went with largely the same aesthetic as the first 3D printed attempt. Sort of inspired by the Amiga 600 or Commodore 64C and other similar machines, but with a screen on top.</p>
<p>
<img class="enclosure" src="/img/amiga_600.jpg" alt="An Amiga 600"  />
</p>
<blockquote>
<p>If you squint hard, it almost looks like one! (Image from <a href="https://en.wikipedia.org/wiki/Amiga_600">Wikipedia</a>)</p>
</blockquote>
<p>With the design somewhat laid out in my head, I started drawing. I split the machine in to 4 main sections, so as to fit on my printers bed.</p>
<p>
<img class="enclosure" src="/img/cyberdeck-mode.png" alt="3D Models of the Design"  />
</p>
<blockquote>
<p>3D Models of the major components</p>
</blockquote>
<p>The two rear sections contain most of the hardware, and are bolted together. On top go two slotted &rsquo;lids&rsquo; with the uprights for the display hinges.</p>
<p>The two front sections attach with tabs that slide in to the rear sections. They are also bolted in the middle.</p>
<p>The front sections only contain standoffs for they keyboard, but could easily hold additional hardware (there&rsquo;s a bit of room underneath, especially towards the back.</p>
<p>You will notice the evenly-spaced holes in the bottom of the device. My idea was here that it would make it easy to add and remove hardware. Each device, like the Pi, USB Hub, etc is on a separate carrier that is bolted to the bottom of the board.</p>
<p>If you want to build your own, but are using slightly different hardware to me, all you need to do is design carriers for it, rather than changing the whole case.</p>
<p>
<img class="enclosure" src="/img/pi-holder-2.jpg" alt="Pi Carrier"  />
</p>
<blockquote>
<p>Quicker than re-printing the whole section!</p>
</blockquote>
<p>It also made it much easier, as if I made a mistake on the hole spacing for the RPi, I only needed to re-print the carrier, not the whole device!</p>
<p>With all that in mind, let&rsquo;s turn to the actual hardware in the cyberdeck.</p>
<h3 id="hardware">Hardware</h3>
<p>I am using largely the same hardware from my first attempts, but let&rsquo;s look at it in a little more detail.</p>
<p>The SBC is a Raspberry Pi 4, 4Gb model. It currently has a 16Gb SD card, but I will be swapping that for a larger one.</p>
<p>
<img class="enclosure" src="/img/pi-cabling.jpg" alt="RPi and USB Hub"  />
</p>
<blockquote>
<p>The Pi next to the USB Hub</p>
</blockquote>
<p>On top of that, is a UPSPack V3. This is a cheap but feature rich UPS board for Raspberry Pi&rsquo;s. It can do 5V, 3A output, report data to the Pi via serial (such as charge status) and shutdown the Pi gracefully before the battery runs out.</p>
<p>It handles charging via USB-C and has a pair of external (unused in my design) USB ports for powering other devices. I also soldered wires for an external switch that is mounted in the back panel of the cyberdeck.</p>
<p>
<img class="enclosure" src="/img/pi-ups.jpg" alt="UPS Board"  />
</p>
<blockquote>
<p>Stacked neatly on top of each other</p>
</blockquote>
<p>Next to the Pi is an &lsquo;internal&rsquo; USB hub, its designed for use in PCs for running things like RGB and Fan Controllers, but it was perfect for my application. It is a 4 port hub with standard USB headers like you&rsquo;d find in any PC.</p>
<p><em>Update: I tested the battery life by running Chrome with a YouTube video playing and logging the uptime every 2s to a file. The result was 3h 40m of runtime.</em></p>
<p>
<img class="enclosure" src="/img/usb-hub.jpg" alt="USB Hub"  />
</p>
<blockquote>
<p>Nestled between the Pi and the battery</p>
</blockquote>
<p>I attached a USB plug to its cable, which is plugged into the bottom USB2 port on the Pi, this whole mess is covered by a plate. I think I might change this design by soldering wires to the underside of the Pi and then just blanking the usb port.</p>
<p>
<img class="enclosure" src="/img/usb-side.jpg" alt="USB Ports"  />
</p>
<blockquote>
<p>Not the most elegant, but it works</p>
</blockquote>
<p>Connected to this hub is they keyboard, display and SDR. I made custom mini and micro USB to header cables to connect the various peripherals.</p>
<p>The SDR is a cheap RTL-SDR board I got from amazon, it has two RF inputs and is in a neat metal case to keep it isolated from other devices. It connects via mini USB to the internal hub</p>
<p>
<img class="enclosure" src="/img/sdr-side.jpg" alt="SDR Side"  />
</p>
<blockquote>
<p>I did have a plate for this side, but it made using the RF connectors a pain</p>
</blockquote>
<p>The keyboard is the same as used in previous attempts. It has &lsquo;RGB&rsquo; lighting (not customisable sadly&hellip; I did have one that was but I managed to fry it ðŸ˜¢).</p>
<p>The RGB is actually kind of a pain, as it draws a lot of power and causes weirdness when the cyberdeck is booted without being plugged in to mains. I am likely to disable it (read: cut the power traces for it ðŸ˜ˆ) in future.</p>
<p>It is a fairly basic &lsquo;cheap&rsquo; mechanical keyboard, but its actually not too bad to type on and its fits the aesthetic I was going for. It connects via mini-USB to the internal hub.</p>
<p>
<img class="enclosure" src="/img/keyboard.jpg" alt="Keyboard"  />
</p>
<blockquote>
<p>The keyboard in all its glory, and the official RPi mouse!</p>
</blockquote>
<p>Finally, the display is a 7&quot; IPS LCD. It has a resolution of 1024x600 and includes capacitive touch. It connects to the Pi via HDMI and the power and touchscreen via a micro USB cable. The cable is also spliced in to the UPSs&rsquo; 5v output as the screen draws a lot of current.</p>
<p>
<img class="enclosure" src="/img/display-mounted.jpg" alt="Display Mounted"  />
</p>
<blockquote>
<p>The display mounted on the cyberdeck</p>
</blockquote>
<p>The display is connected via a &lsquo;custom HDMI cable kit&rsquo; from The Pi Hut. It allows you to mix and match connectors for HDMI and uses a flex flat cable to go between them, quite useful for things like this.</p>
<p>There is a panel on the back of the unit to cover the connections, but leaving open the power input (on the UPS Board) and the 3.5mm audio jack</p>
<p>
<img class="enclosure" src="/img/rear-port.jpg" alt="Rear Panel"  />
</p>
<blockquote>
<p>You can still access the ports you need to</p>
</blockquote>
<p>That&rsquo;s pretty much it for the hardware. It&rsquo;s a standard Raspberry Pi 4. There are 2x USB3 ports accessable, 1x USB2 and 1x Gigabit Ethernet.</p>
<h3 id="bill-of-materials">Bill Of Materials</h3>
<p>Below is a pretty much complete list of the parts used and where I got them from. Prices are as at the time I purchased. You can likely find things cheaper on sites like Aliexpress, or you can even swap things out for other hardware.</p>
<table>
<thead>
<tr>
<th>Device</th>
<th>Description</th>
<th>Cost/Vendor</th>
</tr>
</thead>
<tbody>
<tr>
<td>Raspberry Pi 4</td>
<td>4Gb Model</td>
<td>Â£54 <a href="https://shop.pimoroni.com/products/raspberry-pi-4?variant=29157087445075">Pimoroni</a></td>
</tr>
<tr>
<td>UPSPack V3</td>
<td>UPS &amp; Battery</td>
<td>Â£25.99 <a href="https://www.amazon.co.uk/gp/product/B0719Q5M9X">Amazon</a></td>
</tr>
<tr>
<td>USB Hub</td>
<td>Internal USB Hub</td>
<td>Â£7.59 <a href="https://www.amazon.co.uk/gp/product/B075XR1Q751">Amazon</a></td>
</tr>
<tr>
<td>AK33</td>
<td>Mechanical Keyboard</td>
<td>Â£31.99 <a href="https://www.amazon.co.uk/gp/product/B07XFR338G">Amazon</a></td>
</tr>
<tr>
<td>SDR</td>
<td>KKMoon RTL-SDR</td>
<td>Â£32.99 <a href="https://www.amazon.co.uk/gp/product/B0716CB1PM">Amazon</a></td>
</tr>
<tr>
<td>Display</td>
<td>7&quot; HDMI IPS Touchscreen</td>
<td>Â£28.05 <a href="https://www.aliexpress.com/item/4000829569543.html">Aliexpress</a></td>
</tr>
<tr>
<td>USB Cable</td>
<td>2x 50cm Mini-USB Cables</td>
<td>Â£2.99 ea <a href="https://www.amazon.co.uk/gp/product/B00DY2NAYE/">Amazon</a></td>
</tr>
<tr>
<td>USB Cable</td>
<td>1x Right angle micro-USB Cables</td>
<td>Â£3.99 <a href="https://www.amazon.co.uk/StarTech-com-Micro-USB-Cable-Right-Angled-Connectors-Black/dp/B012S11KV6/ref=sr_1_3?dchild=1&amp;keywords=right+angle+micro+usb&amp;qid=1610904731&amp;s=electronics&amp;sr=1-3">Amazon</a></td>
</tr>
<tr>
<td>HDMI Connector</td>
<td>Up angle micro HDMI Connector</td>
<td>Â£6 <a href="https://thepihut.com/products/diy-hdmi-cable-parts-right-angle-r-bend-micro-hdmi-plug">The Pi Hut</a></td>
</tr>
<tr>
<td>HDMI Connector</td>
<td>Standard HDMI Connector</td>
<td>Â£6 <a href="https://thepihut.com/products/diy-hdmi-cable-parts-straight-hdmi-plug-adapter">The Pi Hut</a></td>
</tr>
<tr>
<td>HDMI Cable</td>
<td>50cm Flex Cable</td>
<td>Â£3 <a href="https://thepihut.com/products/diy-usb-or-hdmi-cable-parts-50-cm-ribbon-cable">The Pi Hut</a></td>
</tr>
<tr>
<td>Dupont Connectors</td>
<td>1550 pcs kit + Crimp Tool</td>
<td>Â£20.99 <a href="https://www.amazon.co.uk/gp/product/B078K9DT69/">Amazon</a></td>
</tr>
<tr>
<td>Nuts &amp; Bolts</td>
<td>440 pcs kit</td>
<td>Â£15.99 <a href="https://www.amazon.co.uk/gp/product/B075CKYJF6">Amazon</a></td>
</tr>
</tbody>
</table>
<h3 id="software">Software</h3>
<p>Right now, the deck is simply running Raspbian, with a few little tweaks to make things like the UPS and Display work correctly.</p>
<p>I might try out other distributions in the future, such as Kali Linux, but for now Raspbian is fine!</p>
<p>For a laugh, I installed steam link and had a go at playing Cyberpunk2077 on my cyberdeck. It worked surprisingly well, but I think I&rsquo;d rather my 32&quot; 1440p gaming monitor over a 7&quot; 600p display running at 30Hz</p>
<p><a href="http://www.youtube.com/watch?v=aXAGUp6Lsp0" title="Cyberpunk on a Cyberdeck">
<img class="enclosure" src="http://img.youtube.com/vi/aXAGUp6Lsp0/0.jpg" alt="Cyberpunk on Cyberdeck"  />
</a></p>
<blockquote>
<p>Click the thumbnail to see the video</p>
</blockquote>
<p><strong>Display</strong></p>
<p>The display &lsquo;works&rsquo; out of the box as its a simple HDMI display, and the touch drivers are included in Raspbian, so the only thing I needed to do was set some config to have it run at its native resolution. I used the guide from Adafruit <a href="">here</a>, but the TL;DR is:</p>
<p>add the below lines to <code>/boot/config.txt</code> and reboot.</p>
<pre><code>hdmi_group=2
hdmi_mode=1
hdmi_mode=87
hdmi_cvt=1024 600 60 3 0 0 0
</code></pre>
<p><strong>UPS</strong></p>
<p>The UPS also &lsquo;works&rsquo; but requires some config changes if you want to be able to see the data over serial, or have the Pi shutdown automatically. They are details in the documentation <a href="https://github.com/rcdrones/UPSPACK_V3/blob/master/README_en.md#Software-Drivers" title="here">here</a>.</p>
<p>You will need to download the scripts they provide if you want a nice way to view the UPS details, but if like me you just need to get the data flowing (I plan to build my own software to show battery status) then add the below to your <code>/boot/config.txt</code> and reboot.</p>
<pre><code>enable_uart=1
dtoverlay=disable-bt
</code></pre>
<p>Once you&rsquo;ve done that, you&rsquo;ll be able to see the data on <code>/dev/ttyAMA0</code> at 9600baud.</p>
<h3 id="inspiration-and-why-would-i-want-to-do-this">Inspiration, and why would I want to do this?</h3>
<p>Like a lot of hardware projects, its better to ask&hellip; why not?</p>
<p>There are plenty of practical reasons you might want to build your own cyberdeck&hellip; maybe you want something portable for &lsquo;hacking in the field&rsquo;, something that contains the exact hardware you need for that&hellip; such as a built in SDR like my deck has.</p>
<p>But largely, at least for me, I built one because I <em>wanted</em> to. The first deck I remember seeing that made me think about building my own was the <a href="https://back7.co/home/raspberry-pi-recovery-kit">&lsquo;Off-Grid cyberdeck&rsquo;</a> by back7. I saw it browsing hackday a few years ago and loved the idea of a portable pi, with custom hardware (e.g the GPIO ports and network switch in back7&rsquo;s deck.</p>
<p>There was also decks like <a href="https://cyberdeck.cafe/mix/virtuscope">&lsquo;The Virtuscope&rsquo;</a> and this awesome <a href="https://imgur.com/a/h2kR0Gs">NUC based deck</a>. Sites like they <a href="https://cyberdeck.cafe/">cyberdeck cafe</a> and the <a href="https://www.reddit.com/r/cyberDeck">cyberdeck subreddit</a> are full of inspiring builds.</p>
<p>More generally, the whole &lsquo;cyberpunk&rsquo; / &lsquo;retrowave&rsquo; / &lsquo;retro-future&rsquo; aesthetic is something that appeales to me.</p>
<p>So will I used this deck for anything? Maybe, maybe not. Did I enjoy building it? Certainly, and that&rsquo;s really all that matters.</p>
<h3 id="conclusion">Conclusion</h3>
<p>This current iteration of my cyberdeck is one I am finally &lsquo;happy&rsquo; with. It&rsquo;s definitely not perfect, and no doubt I will change and improve the design in the future. But I have enjoyed building it, and hopefully given you some inspiration to build one yourself.</p>
<p>If you want to build your own, the STL files are available on thingiverse <a href="https://www.thingiverse.com/thing:4726880/files">here</a>, and you can use the above table for the hardware you&rsquo;ll need.</p>
<p>If you can think of ways to improve my design, or this has inspired you to create your own I&rsquo;d love to hear about them, you can send me a tweet <a href="https://twitter.com/mickwheelz_">@mickwheelz_</a>!</p>
 ]]>
      </content:encoded>
    </item>
    
  </channel>
</rss>
